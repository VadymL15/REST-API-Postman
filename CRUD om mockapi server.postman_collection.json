{
	"info": {
		"_postman_id": "fd0d731a-c2f9-412e-98ae-4a488d395631",
		"name": "CRUD om mockapi server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47565020",
		"_collection_link": "https://vadum-lebid-5626571.postman.co/workspace/Vadym_L's-Workspace~98d85bbb-365a-41d8-8cea-71723909cca0/collection/47565020-fd0d731a-c2f9-412e-98ae-4a488d395631?action=share&source=collection_link&creator=47565020"
	},
	"item": [
		{
			"name": "Create new post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 Created\", () => pm.response.to.have.status(201));\r",
							"const j = pm.response.json();\r",
							"pm.test(\"Has id\", () => pm.expect(j.id).to.be.a(\"string\"));\r",
							"pm.environment.set(\"postId\", j.id);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"My first cloud post\",\r\n  \"body\": \"From MockAPI\",\r\n  \"userId\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/posts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
							"const j = pm.response.json();\r",
							"pm.test(\"id matches\", () => pm.expect(j.id).to.eql(pm.environment.get(\"postId\")));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/posts/{{postId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						"{{postId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update post fully",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
							"const j = pm.response.json();\r",
							"pm.test(\"fields updated\", () => {\r",
							"  pm.expect(j.title).to.eql(\"Updated cloud post with post\");\r",
							"  pm.expect(j.body).to.eql(\"Updated body with post\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Updated cloud post with post\",\r\n  \"body\": \"Updated body with post\",\r\n  \"userId\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/posts/{{postId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						"{{postId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update title of post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
							"pm.test(\"title patched\", () => pm.expect(pm.response.json().title).to.eql(\"Patched cloud post\"));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"title\": \"Patched cloud post\" }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/posts/{{postId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						"{{postId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check post after updating",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
							"const j = pm.response.json();\r",
							"pm.test(\"id matches\", () => pm.expect(j.id).to.eql(pm.environment.get(\"postId\")));\r",
							"pm.test(\"fields updated\", () => {\r",
							"  pm.expect(j.title).to.eql(\"Patched cloud post\");\r",
							"  pm.expect(j.body).to.eql(\"Updated body with post\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/posts/{{postId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						"{{postId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200/204 OK\", () => pm.expect([200,204]).to.include(pm.response.code));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/posts/{{postId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						"{{postId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check after deleting",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 Not Found\", () => pm.response.to.have.status(404));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/posts/{{postId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						"{{postId}}"
					]
				}
			},
			"response": []
		}
	]
}